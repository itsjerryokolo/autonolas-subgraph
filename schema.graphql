type AddNomineeHash @entity(immutable: true) {
  id: Bytes!
  nomineeHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IncentivesClaimed @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  reward: BigInt! # uint256
  topUp: BigInt! # uint256
  unitTypes: [BigInt!]! # uint256[]
  unitIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerUpdated @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PauseDispenser @entity(immutable: true) {
  id: Bytes!
  pauseState: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveNomineeHash @entity(immutable: true) {
  id: Bytes!
  nomineeHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Retained @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  returnAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetDepositProcessorChainIds @entity(immutable: true) {
  id: Bytes!
  depositProcessors: [Bytes!]! # address[]
  chainIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingIncentivesBatchClaimed @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  chainIds: [BigInt!]! # uint256[]
  stakingTargets: [Bytes!]! # bytes32[]
  stakingIncentives: [BigInt!]! # uint256[]
  totalStakingIncentive: BigInt! # uint256
  totalTransferAmount: BigInt! # uint256
  totalReturnAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingIncentivesClaimed @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  chainId: BigInt! # uint256
  stakingTarget: Bytes! # bytes32
  stakingIncentive: BigInt! # uint256
  transferAmount: BigInt! # uint256
  returnAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingParamsUpdated @entity(immutable: true) {
  id: Bytes!
  maxNumClaimingEpochs: BigInt! # uint256
  maxNumStakingTargets: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenomicsUpdated @entity(immutable: true) {
  id: Bytes!
  tokenomics: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryUpdated @entity(immutable: true) {
  id: Bytes!
  treasury: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoteWeightingUpdated @entity(immutable: true) {
  id: Bytes!
  voteWeighting: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithheldAmountSynced @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  amount: BigInt! # uint256
  updatedWithheldAmount: BigInt! # uint256
  batchHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
